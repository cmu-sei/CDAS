{
    "type": "bundle",
    "id": "bundle--c1dfaa67-eada-4eba-87d5-0e101db7edc6",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--e61f5dd9-d26e-454f-ab07-171f3dea6e73",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2018-07-31T00:00:00.000Z",
            "name": "Buffer Overflow via Parameter Expansion",
            "description": "In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/47.html",
                    "external_id": "CAPEC-47"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html",
                    "external_id": "CWE-120"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html",
                    "external_id": "CWE-119"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html",
                    "external_id": "CWE-118"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/130.html",
                    "external_id": "CWE-130"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/131.html",
                    "external_id": "CWE-131"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html",
                    "external_id": "CWE-680"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Gain Privileges",
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_example_instances": [
                "\n               <xhtml:p>Attack Example: FTP glob()</xhtml:p>\n               <xhtml:p>The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob().</xhtml:p>\n               <xhtml:p>This buffer overflow occurs in memory that is dynamically allocated. It may be possible for attackers to exploit this vulnerability and execute arbitrary code on the affected host.</xhtml:p>\n               <xhtml:p>To exploit this, the attacker must be able to create directories on the target host.</xhtml:p>\n               <xhtml:p>The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote attacker can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the attacker must be able to create directories on the FTP server.</xhtml:p>\n               <xhtml:p>[R.47.1][REF-2]</xhtml:p>See also: CVE-2001-0249",
                "\n               <xhtml:p>Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion.</xhtml:p>\n               <xhtml:p>The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer.</xhtml:p>See also: CVE-2006-6652"
            ],
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.",
                "The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is)."
            ],
            "x_capec_resources_required": [
                "Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful."
            ],
            "x_capec_skills_required": {
                "High": "Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the attacker needs to write the shell code to accomplish his or her goals, but the attacker also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled attacker."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.2"
        }
    ]
}