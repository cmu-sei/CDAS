{
    "type": "bundle",
    "id": "bundle--047d82cb-c67f-4d2c-9386-d26a762637f9",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--e827def7-6d74-48b4-8cd2-cd0e0ff00aeb",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2018-07-31T00:00:00.000Z",
            "name": "Exploiting Multiple Input Interpretation Layers",
            "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/43.html",
                    "external_id": "CAPEC-43"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/171.html",
                    "external_id": "CWE-171"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/179.html",
                    "external_id": "CWE-179"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/181.html",
                    "external_id": "CWE-181"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/184.html",
                    "external_id": "CWE-184"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/183.html",
                    "external_id": "CWE-183"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/77.html",
                    "external_id": "CWE-77"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/78.html",
                    "external_id": "CWE-78"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/707.html",
                    "external_id": "CWE-707"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1"
                }
            ],
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Confidentiality": [
                    "Gain Privileges",
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data"
                ]
            },
            "x_capec_example_instances": [
                "\n               <xhtml:div style=\"color:#32498D; font-weight:bold;\">Using Escapes</xhtml:div>\n               <xhtml:p>The backslash character provides a good example of the multiple-parser issue. A backslash is used to escape characters in strings, but is also used to delimit directories on the NT file system. When performing a command injection that includes NT paths, there is usually a need to \"double escape\" the backslash. In some cases, a quadruple escape is necessary.</xhtml:p>\n               <xhtml:div style=\"margin-left:10px;\" class=\"informative\">Original String: C:\\\\\\\\winnt\\\\\\\\system32\\\\\\\\cmd.exe /c\n                  <parsing layer>\n                  Interim String: C:\\\\winnt\\\\system32\\\\cmd.exe /c\n                  <parsing layer>\n                  Final String: C:\\winnt\\system32\\cmd.exe /c</xhtml:div>\n               <xhtml:p>This diagram shows each successive layer of parsing translating the backslash character. A double backslash becomes a single as it is parsed. By using quadruple backslashes, the attacker is able to control the result in the final string.</xhtml:p>\n               <xhtml:p>[R.43.1][REF-2]</xhtml:p>\n            "
            ],
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "User input is used to construct a command to be executed on the target system or as part of the file name.",
                "Multiple parser passes are performed on the data supplied by the user."
            ],
            "x_capec_skills_required": {
                "Medium": "Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.2"
        }
    ]
}