{
    "type": "vulnerability",
    "spec_version": "2.1",
    "id": "vulnerability--8bb1bf2f-c269-45bf-967c-2ff7a0a55b0c",
    "created": "2020-05-26T20:29:37.00844Z",
    "modified": "2020-05-26T20:29:37.00844Z",
    "name": "CVE-2017-3737",
    "description": "OpenSSL 1.0.2 (starting from version 1.0.2b) introduced an \"\"error state\"\" mechanism. The intent was that if a fatal error occurred during a handshake then OpenSSL would move into the error state and would immediately fail if you attempted to continue the handshake. This works as designed for the explicit handshake functions (SSL_do_handshake(), SSL_accept() and SSL_connect()), however due to a bug it does not work correctly if SSL_read() or SSL_write() is called directly. In that scenario, if the handshake fails then a fatal error will be returned in the initial function call. If SSL_read()/SSL_write() is subsequently called by the application for the same SSL object then it will succeed and the data is passed without being decrypted/encrypted directly from the SSL/TLS record layer. In order to exploit this issue an application bug would have to be present that resulted in a call to SSL_read()/SSL_write() being issued after having already received a fatal error. OpenSSL version 1.0.2b-1.0.2m are affected. Fixed in OpenSSL 1.0.2n. OpenSSL 1.1.0 is not affected."
}